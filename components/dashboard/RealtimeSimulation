import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { EnergyData } from "@/entities/all";
import { Activity, Zap } from "lucide-react";

export default function RealtimeSimulation({ onDataUpdate }) {
  const [currentUsage, setCurrentUsage] = useState(0);
  const [isGenerating, setIsGenerating] = useState(true);

  useEffect(() => {
    if (!isGenerating) return;

    const interval = setInterval(async () => {
      // Simulate realistic energy usage patterns
      const hour = new Date().getHours();
      const baseUsage = getBaseUsageForHour(hour);
      const variation = (Math.random() - 0.5) * 0.4; // Â±20% variation
      const usage = Math.max(0.1, baseUsage + variation);
      
      setCurrentUsage(usage);

      // Create new energy data point
      const newDataPoint = {
        timestamp: new Date().toISOString(),
        usage_kwh: usage,
        optimized_usage_kwh: usage * (0.75 + Math.random() * 0.15), // 15-25% savings
        device_type: getRandomDeviceType(),
        is_peak_hour: isPeakHour(hour)
      };

      try {
        const savedData = await EnergyData.create(newDataPoint);
        onDataUpdate?.(savedData);
      } catch (error) {
        console.error("Error saving simulated data:", error);
      }
    }, 3000); // Update every 3 seconds

    return () => clearInterval(interval);
  }, [isGenerating, onDataUpdate]);

  const getBaseUsageForHour = (hour) => {
    // Simulate daily energy usage patterns
    if (hour >= 6 && hour <= 9) return 2.5; // Morning peak
    if (hour >= 17 && hour <= 21) return 3.0; // Evening peak
    if (hour >= 22 || hour <= 5) return 1.2; // Night low
    return 1.8; // Daytime baseline
  };

  const getRandomDeviceType = () => {
    const types = ["heating", "cooling", "lighting", "appliances", "other"];
    return types[Math.floor(Math.random() * types.length)];
  };

  const isPeakHour = (hour) => {
    return (hour >= 17 && hour <= 21) || (hour >= 7 && hour <= 9);
  };

  const getUsageLevel = (usage) => {
    if (usage >= 2.5) return { level: "High", color: "text-red-600", bg: "bg-red-100" };
    if (usage >= 1.8) return { level: "Medium", color: "text-yellow-600", bg: "bg-yellow-100" };
    return { level: "Low", color: "text-green-600", bg: "bg-green-100" };
  };

  const usageLevel = getUsageLevel(currentUsage);

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5 }}
    >
      <Card className="glass-card border-0 shadow-xl rounded-3xl overflow-hidden">
        <CardHeader className="bg-gradient-to-r from-blue-500/10 to-cyan-500/10">
          <CardTitle className="flex items-center gap-2 text-lg">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center">
              <Activity className="w-4 h-4 text-white animate-pulse" />
            </div>
            Live Simulation
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <div className="text-center space-y-4">
            <motion.div
              key={currentUsage}
              initial={{ scale: 1.2 }}
              animate={{ scale: 1 }}
              transition={{ duration: 0.3 }}
              className="text-3xl font-bold text-blue-600"
            >
              {currentUsage.toFixed(2)} kWh
            </motion.div>
            
            <div className={`inline-flex items-center gap-2 px-3 py-2 ${usageLevel.bg} rounded-full`}>
              <Zap className={`w-4 h-4 ${usageLevel.color}`} />
              <span className={`text-sm font-medium ${usageLevel.color}`}>
                {usageLevel.level} Usage
              </span>
            </div>
            
            <div className="flex justify-center">
              <motion.div
                animate={{ 
                  scale: [1, 1.2, 1],
                  opacity: [0.5, 1, 0.5]
                }}
                transition={{ 
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
                className="w-3 h-3 bg-blue-500 rounded-full"
              />
            </div>
            
            <p className="text-xs text-gray-600">
              Updating every 3 seconds
            </p>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}